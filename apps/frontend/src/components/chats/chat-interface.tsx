"use client";

import { useEffect, useRef, useState, useMemo } from "react";
import { ScrollArea } from "../../../../../packages/ui/src/components/scroll-area";
import { Separator } from "../../../../../packages/ui/src/components/separator";
import { ChatMessage } from "./chat-message";
import { ChatInput } from "./chat-input";
import { WelcomeScreen } from "./welcome-screen";
import { ThinkingIndicator } from "./thinking-indicator";
import { useWebSocket } from "../../contexts/websocket-context";
import { useChat } from "../../contexts/chat-context";

type Role = "user" | "assistant";

interface TableDataRow {
  [key: string]: string | number | boolean | null | undefined;
}

interface QueryMeta {
  [key: string]: unknown;
}

interface GraphAnalysis {
  [key: string]: unknown;
}

export interface Message {
  id: string;
  role: Role;
  content: string;
  timestamp: string;
  sources?: Array<{ title: string; url: string }>;
  tableData?: Array<TableDataRow>;
  fullTableData?: Array<TableDataRow>;
  queryMeta?: QueryMeta;
  thinkingSteps?: string[];
  graphAnalysis?: GraphAnalysis;
}

interface LoadingState {
  isLoading: boolean;
  stage?: "analyzing" | "searching" | "generating" | "processing";
  thinking?: string[];
}

interface OceanDataSummary {
  [key: string]: unknown;
}

interface OceanDataResult {
  dynamic_analysis?: string;
  summary?: OceanDataSummary[] | OceanDataSummary;
  summaries?: Array<{
    point: { lat: number; lon: number };
    error?: string;
    summary?: OceanDataSummary[];
    full_summary?: OceanDataSummary[];
  }>;
  full_summary?: OceanDataSummary[];
  graph_analysis?: GraphAnalysis;
}

// Updated WebSocket response interface to handle all backend message types
export interface WebSocketResponse {
  // Original format
  type?: string;
  content?: string;
  query?: string;
  timestamp?: number;
  
  // Backend stage messages
  stage?: string;
  message?: string;
  result?: OceanDataResult;
  error?: string;
  traceback?: string;
  thinking?: string[];
  query_meta?: QueryMeta;
}

export function ChatInterface() {
  const [loadingState, setLoadingState] = useState<LoadingState>({ isLoading: false });
  const [activeTab, setActiveTab] = useState<'answer' | 'sources' | 'graph' | 'steps'>('answer');
  const [currentThinkingSteps, setCurrentThinkingSteps] = useState<string[]>([]);
  const lastSentUserMessageIdRef = useRef<string | null>(null);
  
  // Use the global websocket context
  const { connectionStatus, isConnected, sendMessage: wsSendMessage, onMessage, onError, onClose } = useWebSocket();
  
  // Use the chat context
  const { activeChat, addMessageToChat } = useChat();
  
  // Get messages from the active chat
  const messages = useMemo(() => activeChat?.messages || [], [activeChat?.messages]);

  // Helper function to format result data for display
  const formatResultForDisplay = (result: OceanDataResult | null | undefined): string => {
    if (!result) return "No data available.";
    
    try {
      // Use dynamic analysis if available (generated by Gemini)
      if (result.dynamic_analysis) {
        return result.dynamic_analysis;
      }
      
      // Fallback to static templates if dynamic analysis is not available
      if (result.summary) {
        // Handle single box/region query
        const dataCount = Array.isArray(result.summary) ? result.summary.length : 'multiple';
        return `🌊 **Ocean Data Analysis Complete**\n\nI found oceanographic data with ${dataCount} Argo float measurements in your requested region. The data includes temperature, salinity, and pressure profiles from autonomous floats drifting in the ocean.\n\n**Key Findings:**\n- Data points collected from Argo global ocean observing system\n- Measurements span the requested geographical area and time period\n- Includes vertical profiles of ocean properties\n\nThis data provides valuable insights into ocean conditions and can be used for climate research, weather forecasting, and marine ecosystem studies.`;
      } else if (result.summaries) {
        // Handle multiple point queries
        const totalPoints = result.summaries.length;
        const successfulPoints = result.summaries.filter((s) => !s.error).length;
        const errorPoints = totalPoints - successfulPoints;
        
        let content = `🌊 **Multi-Point Ocean Data Analysis**\n\nAnalyzed ${totalPoints} locations in the ocean:\n\n`;
        
        if (successfulPoints > 0) {
          content += `✅ **Successfully retrieved data from ${successfulPoints} locations**\n`;
        }
        
        if (errorPoints > 0) {
          content += `⚠️ **${errorPoints} locations had no available data**\n`;
        }
        
        content += `\n**Data Summary:**\n`;
        result.summaries.forEach((summary, index: number) => {
          const point = summary.point;
          if (summary.error) {
            content += `- Point ${index + 1} (${point.lat}°N, ${point.lon}°E): No data available\n`;
          } else {
            content += `- Point ${index + 1} (${point.lat}°N, ${point.lon}°E): Data retrieved\n`;
          }
        });
        
        return content;
      } else if (typeof result === 'object') {
        // Fallback for other object types
        return `📊 **Data Retrieved Successfully**\n\nReceived oceanographic data from your query. The response contains:\n\n\`\`\`json\n${JSON.stringify(result, null, 2)}\n\`\`\``;
      } else {
        return String(result);
      }
    } catch (error) {
      console.error("Error formatting result:", error);
      return "Data received successfully, but couldn't format for display. Check console for raw data.";
    }
  };

  useEffect(() => {
    // Set up message handlers using the global websocket context
    onMessage((data: WebSocketResponse) => {
      console.group("💬 Processing WebSocket Response");
      console.log("Full response object:", data);
      console.log("Stage:", data.stage);
      console.log("Message:", data.message);
      console.log("Result:", data.result);
      console.log("Type:", data.type);
      console.log("Content:", data.content);
      console.groupEnd();
      
      // Handle different message types from backend
      if (data.stage) {
        switch (data.stage) {
          case "analyzing":
            console.log("🔎 Stage: Analyzing query");
            console.log("🔍 Analyzing stage - thinking data:", data.thinking);
            setLoadingState({ isLoading: true, stage: "analyzing", thinking: data.thinking });
            // Accumulate thinking steps
            if (data.thinking && data.thinking.length > 0) {
              setCurrentThinkingSteps(prev => {
                const newSteps = [...prev, ...(data.thinking || [])];
                console.log("📝 Updated thinking steps:", newSteps);
                return newSteps;
              });
            }
            break;
            
          case "sql_generation":
            console.log("🛠 Stage: Generating SQL");
            setLoadingState({ isLoading: true, stage: "searching", thinking: data.thinking });
            // Accumulate thinking steps
            if (data.thinking && data.thinking.length > 0) {
              setCurrentThinkingSteps(prev => [...prev, ...(data.thinking || [])]);
            }
            break;
            
          case "db_fetch":
            console.log("📡 Stage: Fetching from database");
            setLoadingState({ isLoading: true, stage: "analyzing", thinking: data.thinking });
            // Accumulate thinking steps
            if (data.thinking && data.thinking.length > 0) {
              setCurrentThinkingSteps(prev => [...prev, ...(data.thinking || [])]);
            }
            break;
            
          case "processing":
            console.log("⚙️ Stage: Processing data");
            setLoadingState({ isLoading: true, stage: "generating", thinking: data.thinking });
            // Accumulate thinking steps
            if (data.thinking && data.thinking.length > 0) {
              setCurrentThinkingSteps(prev => [...prev, ...(data.thinking || [])]);
            }
            break;
            
          case "completed":
            console.log("✅ Stage: Processing completed");
            // Keep loading state until we get the actual result
            setLoadingState({ isLoading: true, stage: "generating", thinking: data.thinking });
            // Accumulate thinking steps
            if (data.thinking && data.thinking.length > 0) {
              setCurrentThinkingSteps(prev => [...prev, ...(data.thinking || [])]);
            }
            break;
            
          case "result":
            console.log("📋 Stage: Final result received");
            const resultPayload = data.result;
            // Prefer single summary table if present
            let tableData: Array<TableDataRow> | undefined =
              resultPayload &&
              Array.isArray(resultPayload.summary) &&
              resultPayload.summary.length > 0 &&
              typeof resultPayload.summary[0] === 'object'
                ? (resultPayload.summary as Array<TableDataRow>)
                : undefined;

            // Otherwise, if summaries array exists (multi-point), pick the first non-empty summary
            if (!tableData && Array.isArray(resultPayload?.summaries)) {
              const firstWithData = resultPayload.summaries.find((s) => Array.isArray(s?.summary) && s.summary.length > 0 && typeof s.summary[0] === 'object');
              if (firstWithData) {
                tableData = firstWithData.summary as Array<TableDataRow>;
              }
            }

            console.log("💾 Creating assistant message with thinking steps:", currentThinkingSteps);
            const assistant: Message = {
              id: crypto.randomUUID(),
              role: "assistant",
              content: formatResultForDisplay(resultPayload),
              timestamp: new Date().toISOString(),
              tableData,
              fullTableData: (() => {
                // If backend included a full_summary, surface it for toggle
                if (resultPayload && Array.isArray(resultPayload.full_summary)) {
                  return resultPayload.full_summary as Array<TableDataRow>;
                }
                if (Array.isArray(resultPayload?.summaries)) {
                  const firstWithFull = resultPayload.summaries.find((s) => Array.isArray(s?.full_summary));
                  if (firstWithFull) return firstWithFull.full_summary as Array<TableDataRow>;
                }
                return undefined;
              })(),
              queryMeta: data.query_meta,
              thinkingSteps: [...currentThinkingSteps],
              sources: [
                { title: "Argo Global Data Assembly Centre", url: "https://argo.ucsd.edu" },
                { title: "Ocean Climate Portal - INCOIS", url: "https://incois.gov.in" },
                { title: "World Ocean Database", url: "https://www.ncei.noaa.gov/wod" },
              ],
              // Add graph analysis to the message
              ...(resultPayload?.graph_analysis && { graphAnalysis: resultPayload.graph_analysis }),
            };
            
            // Add message to the active chat
            if (activeChat) {
              addMessageToChat(activeChat.id, assistant);
            }
            setLoadingState({ isLoading: false });
            setCurrentThinkingSteps([]); // Reset thinking steps after message is created
            break;
            
          case "error":
            console.error("❌ Stage: Error occurred");
            const errorMessage: Message = {
              id: crypto.randomUUID(),
              role: "assistant",
              content: `❌ **Error Processing Request**\n\n${data.message}\n\n${data.traceback ? `**Technical Details:**\n\`\`\`\n${data.traceback}\n\`\`\`` : ''}`,
              timestamp: new Date().toISOString(),
              thinkingSteps: [...currentThinkingSteps],
            };
            
            // Add error message to the active chat
            if (activeChat) {
              addMessageToChat(activeChat.id, errorMessage);
            }
            setLoadingState({ isLoading: false });
            setCurrentThinkingSteps([]); // Reset thinking steps after message is created
            break;
            
          case "no_function_call":
            console.log("💭 Stage: No function call from Gemini");
            const textMessage: Message = {
              id: crypto.randomUUID(),
              role: "assistant",
              content: data.message || "I couldn't process your request as a structured query. Please try rephrasing your question about ocean data.",
              timestamp: new Date().toISOString(),
              thinkingSteps: [...currentThinkingSteps],
            };
            
            // Add text message to the active chat
            if (activeChat) {
              addMessageToChat(activeChat.id, textMessage);
            }
            setLoadingState({ isLoading: false });
            setCurrentThinkingSteps([]); // Reset thinking steps after message is created
            break;
            
          default:
            console.warn("⚠️ Unknown message stage:", data.stage);
            // Handle as generic message
            if (data.message) {
              const genericMessage: Message = {
                id: crypto.randomUUID(),
                role: "assistant",
                content: data.message,
                timestamp: new Date().toISOString(),
                thinkingSteps: [...currentThinkingSteps],
              };
              
              // Add generic message to the active chat
              if (activeChat) {
                addMessageToChat(activeChat.id, genericMessage);
              }
              setLoadingState({ isLoading: false });
              setCurrentThinkingSteps([]); // Reset thinking steps after message is created
            }
        }
      } else if (data.type && data.content) {
        // Handle original format messages
        console.log("📨 Handling original format message");
        const assistant: Message = {
          id: crypto.randomUUID(),
          role: "assistant",
          content: data.content,
          timestamp: new Date().toISOString(),
          thinkingSteps: [...currentThinkingSteps],
          sources: [
            { title: "Argo Global Data Assembly Centre", url: "https://argo.ucsd.edu" },
            { title: "Ocean Climate Portal - INCOIS", url: "https://incois.gov.in" },
            { title: "World Ocean Database", url: "https://www.ncei.noaa.gov/wod" },
          ],
        };
        
        // Add assistant message to the active chat
        if (activeChat) {
          addMessageToChat(activeChat.id, assistant);
        }
        setLoadingState({ isLoading: false });
        setCurrentThinkingSteps([]); // Reset thinking steps after message is created
      } else if (data.error) {
        // Handle direct error messages
        console.error("❌ Direct error message received");
        const errorMsg: Message = {
          id: crypto.randomUUID(),
          role: "assistant",
          content: `❌ **Error**: ${data.error}`,
          timestamp: new Date().toISOString(),
          thinkingSteps: [...currentThinkingSteps],
        };
        
        // Add error message to the active chat
        if (activeChat) {
          addMessageToChat(activeChat.id, errorMsg);
        }
        setLoadingState({ isLoading: false });
        setCurrentThinkingSteps([]); // Reset thinking steps after message is created
      }
    });

    onError((error) => {
      console.group("❌ WebSocket Error");
      console.error("Error details:", error);
      console.log("Connection status before error:", connectionStatus);
      console.groupEnd();
      
      setLoadingState({ isLoading: false });
      
      // Show user-friendly error message
      const errorMessage: Message = {
        id: crypto.randomUUID(),
        role: "assistant",
        content: `❌ **Connection Error**\n\nUnable to connect to the ocean data analysis system. Please ensure the backend server is running and try again.\n\n**Error Details:** ${error instanceof Error ? error.message : 'WebSocket connection failed'}`,
        timestamp: new Date().toISOString(),
      };
      
      // Add error message to the active chat
      if (activeChat) {
        addMessageToChat(activeChat.id, errorMessage);
      }
    });

    onClose((event) => {
      console.group("🔌 WebSocket Connection Closed");
      console.log("Close code:", event.code);
      console.log("Close reason:", event.reason);
      console.log("Was clean:", event.wasClean);
      console.groupEnd();
      
      setLoadingState({ isLoading: false });
    });
  }, [onMessage, onError, onClose, connectionStatus, currentThinkingSteps, activeChat, addMessageToChat]);

  const sendMessage = async (text: string) => {
    // Ensure we have an active chat
    if (!activeChat) {
      console.error("No active chat available");
      return;
    }

    const userMsg: Message = {
      id: crypto.randomUUID(),
      role: "user",
      content: text,
      timestamp: new Date().toISOString(),
    };
    
    // Add user message to the active chat
    addMessageToChat(activeChat.id, userMsg);
    lastSentUserMessageIdRef.current = userMsg.id;
    setLoadingState({ isLoading: true, stage: "analyzing" });
    setCurrentThinkingSteps([]); // Reset thinking steps for new query
    setActiveTab('answer'); // Reset to answer tab for new queries
    
    // Ensure connection status is connected before sending
    if (!isConnected) {
      console.warn('Connection status is not connected:', connectionStatus);
      setLoadingState({ isLoading: false });
      return;
    }

    try {
      console.group("📤 Sending WebSocket Message");
      console.log("Query:", text);
      console.log("Message object:", { query: text });
      console.groupEnd();
      
      wsSendMessage({ query: text });
    } catch (error) {
      console.error("Failed to send message:", error);
      setLoadingState({ isLoading: false });
      
      // Fallback response if WebSocket fails
      const assistant: Message = {
        id: crypto.randomUUID(),
        role: "assistant",
        content: `❌ **Connection Error**\n\nI'm having trouble connecting to the ocean data analysis system. Please check your connection and try again.\n\n**Error Details:** ${error}`,
        timestamp: new Date().toISOString(),
        thinkingSteps: [...currentThinkingSteps],
      };
      
      // Add fallback message to the active chat
      if (activeChat) {
        addMessageToChat(activeChat.id, assistant);
      }
      setCurrentThinkingSteps([]); // Reset thinking steps after message is created
    }
  };

  // After messages update, if the last added message was from the user, scroll to that message
  useEffect(() => {
    if (!lastSentUserMessageIdRef.current) return;
    const messageId = lastSentUserMessageIdRef.current;

    const viewport = document.querySelector(
      "#chat-scroll-area [data-slot=\"scroll-area-viewport\"]"
    ) as HTMLElement | null;
    const target = document.getElementById(`msg-${messageId}`);

    if (viewport && target) {
      // Scroll to the latest user message (not the very top)
      const viewportRect = viewport.getBoundingClientRect();
      const targetRect = target.getBoundingClientRect();
      const top = targetRect.top - viewportRect.top + viewport.scrollTop;
      viewport.scrollTo({ top, behavior: "smooth" });
    }

    // reset once handled
    lastSentUserMessageIdRef.current = null;
  }, [messages.length]);

  // Also scroll to the latest assistant response when it comes in
  useEffect(() => {
    if (messages.length > 0 && messages[messages.length - 1].role === 'assistant') {
      const latestMessage = messages[messages.length - 1];
      const viewport = document.querySelector(
        "#chat-scroll-area [data-slot=\"scroll-area-viewport\"]"
      ) as HTMLElement | null;
      const target = document.getElementById(`msg-${latestMessage.id}`);

      if (viewport && target) {
        // Small delay to ensure the message is rendered
        setTimeout(() => {
          const viewportRect = viewport.getBoundingClientRect();
          const targetRect = target.getBoundingClientRect();
          const top = targetRect.top - viewportRect.top + viewport.scrollTop;
          viewport.scrollTo({ top, behavior: "smooth" });
        }, 100);
      }
    }
  }, [messages]);

  const LoadingIndicator = ({ stage, thinking }: { stage?: string; thinking?: string[] }) => {
    const stageText = {
      analyzing: "Analyzing your ocean data query...",
      searching: "Generating database query...",
      generating: "Processing oceanographic data...",
      processing: "Finalizing results..."
    };

    // If we have thinking steps, show the thinking indicator
    if (thinking && thinking.length > 0) {
      return (
        <div className="p-6">
          <ThinkingIndicator 
            thinking={thinking} 
            stage={stage || "processing"} 
            isVisible={true} 
          />
        </div>
      );
    }

    // Fallback to simple loading indicator
    return (
      <div className="flex items-center gap-3 p-6">
        <div className="flex gap-1">
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse [animation-delay:-0.3s]"></div>
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse [animation-delay:-0.15s]"></div>
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
        </div>
        <span className="text-sm text-muted-foreground">
          {stage ? stageText[stage as keyof typeof stageText] : "Processing..."}
        </span>
      </div>
    );
  };

  const ConnectionStatus = () => {
    const statusConfig = {
      connecting: { color: "bg-yellow-500", text: "Connecting to ocean data system..." },
      connected: { color: "bg-green-500", text: "Connected to ocean data system" },
      disconnected: { color: "bg-red-500", text: "Disconnected from ocean data system" }
    };

    const config = statusConfig[connectionStatus];

    return (
      <div className="flex items-center gap-2 px-4 py-2 bg-muted/50 border-b border-border">
        <div className={`w-2 h-2 rounded-full ${config.color} ${connectionStatus === 'connecting' ? 'animate-pulse' : ''}`}></div>
        <span className="text-xs text-muted-foreground">{config.text}</span>
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full">
      {/* Connection Status */}
      <ConnectionStatus />
      
      {/* Main Content Container */}
      <div className="flex-1 flex flex-col min-h-0 overflow-hidden">
        {messages.length === 0 ? (
          <WelcomeScreen onPick={sendMessage} />
        ) : (
          <ScrollArea id="chat-scroll-area" className="flex-1 min-h-0">
            <div className="max-w-4xl mx-auto px-6 py-8 space-y-8">
              {messages.map((msg, index) => (
                <div key={msg.id} id={`msg-${msg.id}`}>
                  <ChatMessage message={msg} activeTab={activeTab} setActiveTab={setActiveTab} />
                  {index < messages.length - 1 && (
                    <Separator className="my-8 opacity-50" />
                  )}
                </div>
              ))}
              {loadingState.isLoading && (
                <LoadingIndicator stage={loadingState.stage} thinking={loadingState.thinking} />
              )}
            </div>
          </ScrollArea>
        )}

        {/* Input Area */}
        <div className="bg-transparent shrink-0">
          <div className="max-w-4xl mx-auto px-6 py-6">
            <ChatInput 
              onSend={sendMessage} 
              disabled={loadingState.isLoading || !isConnected} 
            />
            {/* Debug info - remove in production */}
            {process.env.NODE_ENV === 'development' && (
              <div className="text-xs text-muted-foreground mt-2">
                Debug: Loading: {loadingState.isLoading ? 'true' : 'false'}, 
                Connection: {connectionStatus}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
